{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","datasourceRequest","method","then","response","status","message","title","options","query","filterPlaceholders","targets","_","filter","target","hide","when","entries","Array","apply","map","datapoints","parent","apiEndpoint","recursiveReq","idi","metric","range","from","toISOString","to","d","nextlink","data","nextLink","convertData","push","entry","hasOwnProperty","metrics","recursiveMetricReq","page","res","total","convertMetrics","streams","i","text","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class GenericDatasource {\r\n\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.headers = {'Content-Type': 'application/json'};\r\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\r\n      this.headers['Authorization'] = instanceSettings.basicAuth;\r\n    }\r\n  }\r\n\r\n  // Required\r\n  // Used for testing datasource in datasource configuration page\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/health',\r\n      method: 'GET'\r\n    }).then(response => {\r\n      if (response.status === 200) {\r\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\r\n      }\r\n    });\r\n  }\r\n\r\n  // Query data from Data API\r\n  // Called once per panel (graph)\r\n  query(options) {\r\n    var query = this.filterPlaceholders(options);\r\n    //console.log(\"query QUERY:\", JSON.stringify(query));\r\n\r\n    // Filter targets that are set to hidden\r\n    query.targets = _.filter(query.targets, target => {\r\n      return target.hide != true;\r\n    });\r\n\r\n    // All targets filtered OR no metric selected\r\n    if (query.targets.length <= 0 || !('metric' in query.targets[0])) {\r\n      return this.q.when([]);\r\n    }\r\n \r\n    // Make a new array with zero-valued object fields\r\n    var entries = Array.apply(null, Array(query.targets.length)).map(function () {\r\n      return {target: '', datapoints: []};\r\n    });\r\n\r\n    var parent = this;\r\n\r\n    const apiEndpoint = \"data/\";\r\n\r\n    function recursiveReq(idi,url) {\r\n\r\n      var target = query.targets[idi];\r\n\r\n      if (url == \"\"){\r\n        url = parent.url + \"/\" + apiEndpoint + target.metric +\r\n        '?from=' + query.range.from.toISOString() + '&to=' + query.range.to.toISOString()\r\n      }else{\r\n        url = parent.url + url\r\n      }\r\n      return parent.backendSrv.datasourceRequest({\r\n        url: url ,\r\n        method: 'GET'\r\n      }).then(function (d) {\r\n        var nextlink = d.data.nextLink; \r\n        var datapoints = parent.convertData(d.data);\r\n     \r\n        entries[idi].target = target.metric \r\n        entries[idi].datapoints.push(...datapoints);\r\n\r\n        if (typeof nextlink != 'undefined' && nextlink != \"\") {\r\n          // query the next page\r\n          return recursiveReq( idi,nextlink);\r\n        } else if (idi < query.targets.length - 1) {\r\n          // one target done, query the next target\r\n          return recursiveReq(++idi,\"\");\r\n        } else {\r\n          // all done\r\n          d.data = entries;\r\n          return d;\r\n        }\r\n\r\n      });\r\n    } // end func\r\n   \r\n    return recursiveReq(0,\"\");\r\n  }\r\n\r\n  // Convert historical SenML data from Data/Aggr API to Grafana datapoints\r\n  convertData(data) {\r\n    \r\n    var datapoints = _.map(data.data, entry => {\r\n      switch(true){\r\n        case entry.hasOwnProperty(\"v\"):\r\n          return [entry[\"v\"], entry[\"t\"] * 1000]; \r\n        case entry.hasOwnProperty(\"vs\"):\r\n          return [entry[\"vs\"], entry[\"t\"] * 1000]; \r\n        case entry.hasOwnProperty(\"vb\"):\r\n          return [(entry[\"vb\"]==true ? 1:0), entry[\"t\"] * 1000]; \r\n      }\r\n      throw \"No value in senml record!\"\r\n    });\r\n    return datapoints;\r\n  }\r\n\r\n  // Remove targets that have unselected metric or source\r\n  filterPlaceholders(options) {\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.metric !== 'select datastream';\r\n    });\r\n\r\n    return options;\r\n  }\r\n\r\n  // Query list of metrics from Registry API\r\n  // Required for templating\r\n  queryMetrics(options) {\r\n    var metrics = []\r\n    var parent = this;\r\n    function recursiveMetricReq(page) {\r\n      return parent.backendSrv.datasourceRequest({\r\n        //url: this.url + '/search',\r\n        url: parent.url + '/registry?page='+page,\r\n        method: 'GET',\r\n        //headers: { 'Content-Type': 'application/json' }\r\n      }).then(function (res) {\r\n        var total = res.data.total; // total from data api\r\n        metrics.push(...parent.convertMetrics(res));\r\n        if (total > metrics.length) {\r\n          // query the next page\r\n          return recursiveMetricReq(++page);\r\n        } else {\r\n          return metrics;\r\n        }\r\n\r\n      });\r\n    }\r\n    return recursiveMetricReq(1);\r\n  }\r\n\r\n  // Convert registration from Registry API to the format required by Grafana + some meta information\r\n  convertMetrics(res) {\r\n    return _.map(res.data.streams, (d, i) => {\r\n      return {\r\n        text: d.name,\r\n        value: i\r\n      };\r\n    });\r\n  }\r\n\r\n\r\n}\r\n"]}