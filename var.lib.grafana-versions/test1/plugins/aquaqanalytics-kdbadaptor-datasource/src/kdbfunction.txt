{[d] \n \n \n conc:{[d;raw] \n \n c:(cols raw) except d[`grouping`temporal_field]; \n ca:{$[x ~ ();last;value x]}d[`conflation;`agg]; \n :c!ca,/:c,:(); \n }; \n \n conb:{[d] \n \n cv: value d[`conflation;`val];cf:d[`temporal_field]; \n :(enlist cf)!enlist(xbar;cv;cf); \n }; \n \n wbuild:{[d] \n \n if[d[`where]~();:()]; \n wc:{[x]$[0=type first x;x;enlist x]}d[`where]; \n :{[x](value first x),1_x} each wc; \n }; \n \n cbuild:{[d;end] \n \n c:d[`column]; \n c:$[0h<>first type each c;enlist c;c]; \n :c:{x[;1]!x}raze each{[s;x] \n enlist[x 1]!enlist(value $[s~0b;\"::\";x 0];x 1)}[end;]each c; \n }; \n \n bbuild:{[d;end] \n \n g:d[`grouping];b:d[`by]; \n :$[99h=type g;$[end;g;{x!x}value g],b!b;{$[x~();0b;x!x]}distinct g,b]; \n }; \n \n format:{[x;gfid;err] \n \n t:0!x; \n rows:enlist{value x}each t; \n columns:enlist ([]text:key flip t); \n r:`columns`rows!(columns;rows); \n :`payload`id`error!(r;gfid;$[99h=type t;\"OK\";\"NOT OK - \", err]); \n }; \n \n end:0b; \n errmsg:\"0\"; \n gfid:d[`queryId]; \n \n \n d@:`queryParam; \n qt:d[`query;`type]; \n b:bbuild[d;end]; \n w:wbuild[d]; \n \n \n if[qt=`select; \n t:d[`table]; \n c:cbuild[d;end]; \n \n raw:?[t;w;0b;$[b~0b;c;c,b]];]; \n end:1b; \n \n \n con:0b; \n if[not()~d[`conflation]; \n con:1b; \n cb:conb[d],$[b~0b;();b]; \n cc:$[qt=`select;1_cbuild[d;end];conc[d;raw]]; \n ]; \n \n \n if[con; \n raw:?[raw;();cb;cc]; \n end:0b; \n if[qt=`select; \n raw:(cols[key raw],cc:{`$x}each count[cols value raw]#.Q.a)xcol raw]; \n ]; \n \n \n if[qt=`select; \n b:bbuild[d;end]; \n c:$[con;{x!x}d[`temporal_field],cc;cbuild[d;end]]; \n ]; \n \n \n final:?[raw;();b;c]; \n final:{[t]((cols t)[0],{`$x} each count[1_cols t]#.Q.a) xcol t}final; \n final \n ; \n :format[final;gfid;errmsg]; \n } \n
