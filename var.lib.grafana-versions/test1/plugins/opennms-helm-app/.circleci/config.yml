version: 2.1

executors:

  build-executor:
    docker:
      - image: opennmsbamboo/node-centos

  node-executor:
    docker:
      - image: circleci/node:11

  docker-executor:
    docker:
      - image: docker:19.03.0-git

  docs-executor:
    docker:
      - image: opennms/asciibinder

  netlify-cli-executor:
    docker:
      - image: opennms/netlify-cli:2.8.3-b1

commands:
  docker-registry-login:
    description: "Connect to Docker Registry"
    steps:
      - run:
          name: DockerHub Login
          command: |
            docker login -u ${DOCKERHUB_LOGIN} -p ${DOCKERHUB_PASS}
jobs:
  pre-build:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Get version number
          command: ./get-version.sh
      - persist_to_workspace:
          root: ~/
          paths:
            - project
  build:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          name: Restore Package Cache
          keys:
            - npm-packages-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-packages-{{ .Branch }}
            - npm-packages-
      - run:
          name: Install Test Dependencies
          command: npm install mocha-junit-reporter
      - run:
          name: Install Dependencies
          command: npm --pure-lockfile --prefer-offline --no-progress install
      - save_cache:
          name: Save Package Cache
          key: npm-packages-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules/
      - run:
          name: Run Build
          command: npm run build
      - run:
          name: Run Tests
          command: |
              mkdir -p reports/mocha
              mkdir -p reports/eslint
              npm run test-circleci
              npm run eslint-circleci
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  build-docs:
    executor: docs-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate documentation as static HTML
          command: asciibinder package -l debug docs
      - run:
          name: Create docs tarball 
          command: |
            export HELM_VERSION=$(cat version.tag)
            mkdir -p ./dist/docs
            tar -czf "./dist/docs/opennms-helm_${HELM_VERSION}.tar.gz" -C docs/_package .
      - store_artifacts:
          path: ./dist/docs
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/docs

  make-tarball:
    executor: build-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Create plugin tarball
          command: mkdir -p ./dist/packages && tar --exclude='package-lock.json' --exclude='.circleci' --exclude='.git' --exclude='./node_modules' --exclude='./dist/packages' -czf "./dist/packages/opennms-helm_$(cat version.tag).tar.gz" .
      - store_artifacts:
          path: ./dist/packages
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/dist/packages

  make-docker-image:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - run:
          name: Build Docker Image
          command: |
            docker build \
              --build-arg OPENNMS_HELM_PKG=opennms-helm_$(cat version.tag).tar.gz \
              --build-arg GRAFANA_VERSION=$(cat grafana.version) \
              -t helm:$(cat version.tag) .
      - run:
          name: Export Docker Image as artefact
          command: docker image save helm:$(cat version.tag) -o helm-docker-image
      - store_artifacts:
          path: ./helm-docker-image
      - persist_to_workspace:
          root: ~/
          paths:
            - ./project/helm-docker-image

  publish-docker-image-latest:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - docker-registry-login
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i ./helm-docker-image
      - run:
          name: Set DockerHub organization and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi            
      - run:
          name: Tag Docker Container Images for release and publish to DockerHub
          command: |
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.tag)
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:$(cat version.tag)
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:latest

  publish-docker-image-bleeding:
    executor: docker-executor
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/
      - docker-registry-login
      - run:
          name: Load Docker Container Image file
          command: |
            docker image load -i ./helm-docker-image
      - run:
          name: Set DockerHub organization and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_USER+x} ]; then
                DOCKERHUB_PROJECT_USER=$(echo "${CIRCLE_PROJECT_USERNAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_USERNAME instead which is set to ${DOCKERHUB_PROJECT_USER}."
            else
                DOCKERHUB_PROJECT_USER=$(echo "${DOCKERHUB_PROJECT_USER}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_USER=${DOCKERHUB_PROJECT_USER}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_USER with ${DOCKERHUB_PROJECT_USER}."
            fi
      - run:
          name: Set DockerHub project name and ensure lower case
          command: |
            if [ -z ${DOCKERHUB_PROJECT_NAME+x} ]; then
                DOCKERHUB_PROJECT_NAME=$(echo "${CIRCLE_PROJECT_REPONAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Use CIRCLE_PROJECT_REPONAME instead which is set to ${DOCKERHUB_PROJECT_NAME}."
            else
                DOCKERHUB_PROJECT_NAME=$(echo "${DOCKERHUB_PROJECT_NAME}" | tr '[:upper:]' '[:lower:]')
                echo "export DOCKERHUB_PROJECT_NAME=${DOCKERHUB_PROJECT_NAME}" >> ${BASH_ENV}
                echo "Overwrite DOCKERHUB_PROJECT_NAME with ${DOCKERHUB_PROJECT_NAME}."
            fi            
      - run:
          name: Tag Docker Container Images for bleeding and publish to DockerHub
          command: |
            docker tag helm:$(cat version.tag) ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding
            docker push ${DOCKERHUB_PROJECT_USER}/${DOCKERHUB_PROJECT_NAME}:bleeding

  publish-docs:
    executor: netlify-cli-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Extract docs from artifacts
          command: cd ~/project/dist/docs && tar xzf *.tar.gz
      - run:
          name: Deploy docs to Netlify
          command: netlify deploy --prod -d dist/docs/helm -s ${NETLIFY_SITE_ID}

workflows:
  version: 2
  build-workflow:
    jobs:
      - pre-build:
          filters:
            tags:
              only: /^v.*/
      - build:
          requires:
            - pre-build
          filters:
            tags:
              only: /^v.*/
      - build-docs:
          requires:
            - pre-build
          filters:
            tags:
              only: /^v.*/
      - make-tarball:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
      - make-docker-image:
          requires:
            - make-tarball
          filters:
            tags:
              only: /^v.*/
      - publish-docker-image-latest:
          requires:
            - make-docker-image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish-docker-image-bleeding:
          requires:
            - make-docker-image
          filters:
            branches:
              only: master
            tags:
              ignore: /^v.*/
      - publish-docs:
          requires:
            - build-docs
          filters:
            branches:
              only: 
                - master
            tags:
              ignore: /^v.*/
