/// <reference path="../node_modules/grafana-sdk-mocks/app/headers/common.d.ts" />
import { KDBMetaQuery } from './meta_query';
import { QueryCtrl } from 'app/plugins/sdk';
import { SqlPart } from './sql_part/sql_part';
import KDBQuery from './kdb_query';
export interface QueryMeta {
    sql: string;
}
export declare class KDBQueryCtrl extends QueryCtrl {
    $scope: any;
    $injector: any;
    private templateSrv;
    private $q;
    private uiSegmentSrv;
    static templateUrl: string;
    showLastQuerySQL: boolean;
    showHelp: boolean;
    useByClause: boolean;
    queryModel: KDBQuery;
    metaBuilder: KDBMetaQuery;
    lastQueryMeta: QueryMeta;
    tableSegment: any;
    whereAdd: any;
    timeColumnSegment: any;
    metricColumnSegment: any;
    groupingSegment: any;
    functionSegment: any;
    conflationUnitSegment: any;
    conflationDurationSegment: any;
    conflationAggregateSegment: any;
    rowCountLimitSegment: any;
    kdbSideFunctionSegment: any;
    formats: any[];
    queryTypes: any[];
    selectMenu: any[];
    groupMenu: any[];
    aggMenu: any[];
    durationUnits: any[];
    selectParts: SqlPart[][];
    groupParts: SqlPart[];
    whereParts: SqlPart[];
    kdbFunction: string;
    /** @ngInject */
    constructor($scope: any, $injector: any, templateSrv: any, $q: any, uiSegmentSrv: any);
    buildFunctionQueryPanel(): void;
    buildQueryBuilderPanel(): void;
    newKdbArgSegment(): any;
    setupAdditionalMenu(): void;
    updateProjection(): void;
    updatePersistedParts(): void;
    buildSelectMenu(): void;
    resetPlusButton(button: any): void;
    onQueryChange(): void;
    getTableSegments(): any;
    onTableChanged(): void;
    getTimeColumnSegments(): any;
    timeColumnChanged(): void;
    conflationSettingsChanged(): void;
    rowCountLimitChanged(): void;
    getGroupingSegments(): any;
    groupingChanged(): void;
    kdbSideFunctionChanged(): void;
    getKdbServerFunctions(): any;
    onDataReceived(dataList: any): void;
    onDataError(err: any): void;
    transformToSegments(config: any): (results: any) => any;
    findAggregateIndex(selectParts: any): any;
    findBinaryAggIndex(selectParts: any): any;
    findMovingIndex(selectParts: any): any;
    findBucketIndex(groupParts: any): any;
    findWindowIndex(selectParts: any): any;
    addSelectPart(selectParts: any, item: any, subItem: any): void;
    removeSelectPart(selectParts: any, part: any, index: any): void;
    handleSelectPartEvent(part: any, index: any, evt: any, selectParts: any): any;
    handleWherePartEvent(whereParts: any, part: any, evt: any, index: any): any;
    getWhereOptions(): any;
    addWhereAction(part: any, index: any): void;
    handleQueryError(err: any): any[];
    updateColumnMeta(part: any): Promise<{}>;
    aggQueryToggled(): void;
    groupingToggled(): void;
    resetConflationFields(): void;
    functionChanged(): void;
    queryFormatRefresh(): void;
    temporalFieldToggled(): void;
}
